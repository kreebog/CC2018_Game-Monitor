doctype html
html(lang='en')
  head
    include head.pug
  // Page Content
  .container-fluid
    // Portfolio Item Heading
    h1.my-4(id='viewTitle') Game Monitor
    // Portfolio Item Row
    .row
      div.col-md-8(id='main')
        h5 Please select a game from the list below to get started.
      .col-md-4(id='game_action')
        
        table.table.table-sm.table-dark.small.text-center(id='curMovement')
          th(scope='col') Movement Actions
          tr
            td
              div(id="movementBtnGroupUp")
                button(class='movement_btns' id='btn_Jump_N') J
                button(class='movement_btns' id='btn_move_N') M
                button(class='movement_btns' id='btn_look_N') L
                div &#11245;
              div(style="display: flex; justify-content: center;")
                div(id="movementBtnGroupLeft")
                  button(class='movement_btns' id='btn_Jump_W') J
                  button(class='movement_btns' id='btn_move_W') M
                  button(class='movement_btns' id='btn_look_W') L
                  div &#11244;
                div(id="movementBtnGroupRight")
                  div &#11246;
                  button(class='movement_btns' id='btn_Jump_E') J
                  button(class='movement_btns' id='btn_move_E') M
                  button(class='movement_btns' id='btn_look_E') L
              div(id="movementBtnGroupDown") &#11247;
                button(class='movement_btns' id='btn_Jump_S') J
                button(class='movement_btns' id='btn_move_S') M
                button(class='movement_btns' id='btn_look_S') L
              div(id="movementBtnGroupStandWrite")
                button(class='bg-primary' id='btn_stand') Stand
                button(class='bg-primary' id='btn_write') Write
        h3.my-3 Activity
        table.table.table-sm.table-dark.small.text-center(id='curGameActivity')
          th(scope='col') Move
          th(scope='col') Action
          th(scope='col') Cohesion
          th(scope='col') Result
          tr
            td 1
            td
              h1.badge.badge-primary.badge-warning South
            td
              h1.badge.badge-success B1
              h1.badge.badge-danger B2
              h1.badge.badge-success B3
              h1.badge.badge-danger B4
              h1.badge.badge-success B5
            td 
              h1.badge.badge-success OK
        h3.my-3 Current Score
        table.table.table-dark.text-center.font-weight-bold(id='curGameScore')
            th(scope='col') Round
            th(scope='col') Moves
            th(scope='col') Backtracks
            th(scope='col') Bonus
            tr
              td(id='curGame_round') 0
              td(id='curGame_moves') 0
              td(id='curGame_backtracks') 0
              td(id='curGame_bonus') 0
        h3.my-3 Move Result
        p(id='curGame_outcomes') Nothing to see here...
    // /.row
    // Related Projects Row
    h3.my-4(id='games_header') Current Games
    .row(id='games')
      h6(style="text-indent:20px;") There are no games running at the moment, why not start one?
  // Footer
  include foot.pug
  
  // AJAX functions go here...
  script(src='/views/js/resize.js')
  script.
    
    // set up global vars
    let gamesList = new Array();
    let curGame = {gameId:0};
    let playerLoc = '#0x0';
    let lastPlayerLoc = '#0x0';
    

    function getActionUrl(buttonId) {
      let ret = '!{baseActionUrl}' + curGame.id + '?act=' + buttonId.split('_')[1] + '&dir=';
      let dir = buttonId.substring(buttonId.length - 1);

      let t = 'none'
      switch (dir) {
        case 'N': t = 'north'; break;
        case 'S': t = 'south'; break;
        case 'E': t = 'east'; break;
        case 'W': t = 'west'; break;
      }
      ret += t;

    console.log(ret);
      return ret;
    }

    // load button event handlers
    var nodes = document.getElementById('curMovement').querySelectorAll('button');
    for(var i = 0 ; i < nodes.length ; i++) {
       
      nodes[i].addEventListener('click', function() {
        $.ajax({url: getActionUrl(this.id), success: function(result) { 
            $('#curGame_round').html(result.score.gameRound);
            $('#curGame_moves').html(result.score.moveCount);
            $('#curGame_backtracks').html(result.score.backtrackCount);
            $('#curGame_bonus').html(result.score.bonusPoints);
            if (result.outcome !== undefined) $('#curGame_outcomes').html(result.outcome.join('<br>'));
            if (result.engram !== undefined) $('#curGame_outcomes').append('<br>' + result.engram.sight + '<br>' + result.engram.sound + '<br>' + result.engram.smell + '<br>' + result.engram.touch + '<br>' + result.engram.taste + '<br>');
          
            playerLoc = '#' + result.location.row + 'x' + result.location.col;
            setPlayerLoc();
          } 
        });
        
        console.log('You clicked ' + this.textContent + ", id=" + this.id);
      });
    }

    function setPlayerLoc() {
      $(lastPlayerLoc).html('');
      $(playerLoc).html('@');

      console.log('moving from %s to %s', lastPlayerLoc, playerLoc);
      lastPlayerLoc = playerLoc.toString();
    }

    // refreshes the current games list
    function refreshGames() {
        $(document).ready(function() {
   
        $.ajax({url: '!{gamesUrl}', success: function(result) {
            if (result.status === undefined && result.length > 0) {
              gamesList = result;
              $('#games').html('');
              gamesList.forEach( function(game, index) { 
                $('#games').append('<div class="col-md-3 col-sm-6 mb-4">' +
                '   <a class="btn" onclick="selectGame(&quot;' + game.gameId + '&quot, &quot;' + game.url + '&quot;)">' + 
                '      <div class="card bg-secondary text-center" style="border:solid 1px black; width:200px;">' + 
                '         <img class="card-img-top" src="/views/images/' + game.team.logo + '" alt="Team Card" style="width:50%;margin-right:auto;margin-left:auto;margin-top:3px">' + 
                '         <h4 class="card-title align-middle text-white font-weight-bold" style="text-shadow:2px 2px #222">' + game.team.name + '</h4>' + 
                '         <div class="card-body bg-danger" style="border:solid 1px black">' + 
                '            <p class="card-text text-white m-0 font-weight-bold" style="text-shadow:1px 1px #222">' + game.mazeStub.seed + '</p>' + 
                '            <p class="card-text text-white m-0" style="text-shadow:1px 1px #222">Round: ' + game.score.gameRound + '</p>' + 
                '            <p class="card-text text-white m-0" style="text-shadow:1px 1px #222">Moves: ' + game.score.moveCount + '</p>' + 
                '         </div>' + 
                '      </div>' + 
                '   </a>' + 
                '</div>');
              });

              if(curGame.gameId == 0) {
                selectGame(gamesList[0].gameId, gamesList[0].url);
              }
            } else {
              curGame = {gameId:0};
              gamesList = new Array();
              $('#maze_container').html('<h5>Please select a game from the list below to get started.</h5>');
              $('#games').html('<h6 style="text-indent:20px;">There are no games running at the moment, why not start one?</h6>');
            }
        }, error: function() {
          $('#games').html('<h6 style="text-indent:20px;color:red">Unable to load the list of games - you might need to ask for help!</h6>');
        }});
      });
    }

    function selectGame(gameId, gameUrl) {
      console.log('Game Selected: ', gameId);
      if (curGame.gameId == gameId) {
        console.log('Game %s already loaded.', gameId);
        return;
      } else {
        console.log('Loading game: %s', gameId);

        // make the ajax call
        $.ajax({url: gameUrl, success: function(result) {
            curGame = result;
            lastPlayerLoc = '#' + curGame.player.location.row + 'x' + curGame.player.location.row;
            playerLoc = '#' + curGame.player.location.row + 'x' + curGame.player.location.col;
            renderGame();
            setPlayerLoc();
        }});

      }
    }

    function renderGame() {
      // TODO:
      // Where is the ajax call to refresh maze data being inserted?
      // Where to place movement buttons?
      // utilize scale for items in games list 
      let cells = curGame.maze.cells;
      let maze_width = cells[0].length * 50 //
      let parent_width = parseInt($('#main').css('width'));

      let cTxt ='';

      $('#viewTitle').html(curGame.team.name + ' in ' + curGame.maze.seed);

      // Create new maze container and insert into vpGame 
      $('#main').html("");
      $('#main').append('<div id="maze_container"> </div>');
      $('#maze_container').css('width', '500px');
      
      for (row = 0; row < cells.length; row++) {
        // create new row
        let div_row = document.createElement('div');
        div_row.setAttribute("class", "maze_row");
        $('#maze_container').append(div_row);
        div_row.style.width = maze_width + "px";

        for (col = 0; col < cells[0].length; col++) {
          let cId = row + 'x' + col;
          var temp = document.createElement('span');
          temp.setAttribute("id", cId);
          temp.setAttribute("class", "maze_cell");
          div_row.appendChild(temp);

          let cell = cells[row][col];

          let cDiv = $('#' + row + 'x' + col);

          if (!(cell.exits & 1)) cDiv.css('border-top', '2px solid black ');
          if (!(cell.exits & 2)) cDiv.css('border-bottom', '2px solid black ');
          if (!(cell.exits & 4)) cDiv.css('border-right', '2px solid black ');
          if (!(cell.exits & 8)) cDiv.css('border-left', '2px solid black ');

          if (!!(cell.tags & 1)) cDiv.addClass('start');
          if (!!(cell.tags & 2)) cDiv.addClass('finish');
          
          if (!!(cell.tags & 4) && !(cell.tags & 1) && !(cell.tags & 2)) cDiv.addClass('path');

        }
      }
        let zoom_value;
        if (maze_width > parent_width) {
          zoom_value = ((parent_width / maze_width)*90).toFixed(6).toString() + "%";
        }
        else {
          zoom_value = "100%";
        }        
        
        resizeContainer(document.getElementById('maze_container'), zoom_value);
    }

    // need to populate the list
    refreshGames();
    
    // then start the refresh timer
    let gamesListRefreshRate = !{gamesListRefreshRate};
    let gamesListTimer = setInterval(refreshGames, gamesListRefreshRate);
    console.log('Current Games list refreshing every %dms.', gamesListRefreshRate);
    
    // change the rate at which the games list is refresshing
    function changeGamesListRefreshRate(newInterval) {
      if (newInterval < 500){
        console.log('Too fast! Try 500 or more.  Current rate: %dms', gamesListRefreshRate);
        return;
      }
      clearInterval(gamesListTimer);
      gamesListTimer = setInterval(refreshGames, newInterval);
      console.log('Current Games list refresh rate changed from %dms to %dms.', gamesListRefreshRate, newInterval);
      gamesListRefreshRate = newInterval;
    }


    function resizeContainer(el_container, zoom_value = 0) {
      el_container.style.zoom = zoom_value;
    }; 
    
